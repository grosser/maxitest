# https://raw.githubusercontent.com/jeremyevans/minitest-hooks/master/MIT-LICENSE
# BEGIN generated by rake update, do not modify
=begin
Copyright (c) 2015 Jeremy Evans

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
  
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
   
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
=end
#END generated by rake update, do not modify

# https://raw.githubusercontent.com/jeremyevans/minitest-hooks/master/lib/minitest/hooks.rb
# BEGIN generated by rake update, do not modify
# Add support for around and before_all/after_all/around_all hooks to
# minitest spec classes.
module Minitest::Hooks
  # Add the class methods to the class. Also, include an additional
  # module in the class that before(:all) and after(:all) methods
  # work on a class that directly includes this module.
# Empty method, necessary so that super calls in spec subclasses work.
  def before_all
  end

  # Empty method, necessary so that super calls in spec subclasses work.
  def after_all
  end

  # Method that just yields, so that super calls in spec subclasses work.
  def around_all
    yield
  end

  # Method that just yields, so that super calls in spec subclasses work.
  def around
    yield
  end

  # Run around hook inside, since time_it is run around every spec.
  def time_it
    super do
      around do
        yield
      end
    end
  end
end

module Minitest::Hooks::ClassMethods
  # Object used to get an empty new instance, as new by default will return
  # a dup of the singleton instance.
  NEW = Object.new.freeze

  # Unless name is NEW, return a dup singleton instance.
  def new(name)
    if name.equal?(NEW)
      return super
    end

    instance = @instance.dup
    instance.name = name
    instance.failures = []
    instance
  end

  # When running the specs in the class, first create a singleton instance, the singleton is
  # used to implement around_all/before_all/after_all hooks, and each spec will run as a
  # dup of the singleton instance.
  def run(reporter, options={})
    r = nil
    @instance = new(NEW)

    @instance.around_all do
      @instance.before_all
      r = super
      @instance.after_all
    end
    r
  end

  # If type is :all, set the around_all hook, otherwise set the around hook.
  def around(type=nil, &inside)
    method = type == :all ? :around_all : :around
    include(Module.new do
      define_method(method) do |&block|
        super() { instance_exec(block, &inside) }
      end
    end)
  end

  # If type is :all, set the before_all hook instead of the before hook.
  def before(type=nil, &block)
    if type == :all
      include(Module.new do
        define_method(:before_all) do
          super()
          instance_exec(&block)
        end
      end)
      nil
    else
      include Module.new { define_method(:setup) { super(); instance_exec(&block) } }
    end
  end

  # If type is :all, set the after_all hook instead of the after hook.
  def after(type=nil, &block)
    if type == :all
      include(Module.new do
        define_method(:after_all) do
          instance_exec(&block)
          super()
        end
      end)
      nil
    else
      include Module.new { define_method(:teardown) { instance_exec(&block); super() } }
    end
  end
end

# Spec subclass that includes the hook methods.
class Minitest::HooksSpec < Minitest::Spec
  include Minitest::Hooks
end
#END generated by rake update, do not modify