require "bundler/setup"
require "bundler/gem_tasks"
require "bump/tasks"
require "wwtd/tasks"

desc "Run all tests"
task :default do
  sh "rspec spec/"
end

desc "Update all dependencies"
task :update do
  require "open-uri"

  Dir["lib/maxitest/vendor/*"].each do |file|
    parts = File.read(file).split(%r{(# https://.*)})

    parts = [parts[0].strip] + parts[1..-1].each_slice(2).map do |url, section|
      do_not_modify = "generated by rake update, do not modify"
      code = open(url.sub("# ", "")).read.gsub(/require .*?\n/, "").strip
      code = "=begin\n#{code}\n=end" if url.include?("LICENSE")
      if url.include?("testrbl.rb")
        # nest under Maxitest to avoid collision
        code = "module Maxitest\n#{code.gsub(/^/, "  ").gsub(/^\s+$/, "")}\nend"
      elsif url.include?("line_plugin.rb")
        # replace ruby with mtest
        raise unless code.sub!(%{output = "ruby \#{file} -l \#{line}"}, %{output = "mtest \#{file}:\#{line}"})
      elsif url.include?("hooks.rb")
        # - rewrite hooks to have rspec/rack/rails style around callbacks
        # - allow calling around/before/after multiple times
        raise unless code.sub!(/ +def around\(.*  end\s*/m, <<-RUBY.gsub(/^        /, ""))
          def around(type=nil, &inside)
            method = type == :all ? :around_all : :around
            include(Module.new do
              define_method(method) do |&block|
                super() { instance_exec(block, &inside) }
              end
            end)
          end

          # If type is :all, set the before_all hook instead of the before hook.
          def before(type=nil, &block)
            if type == :all
              include(Module.new do
                define_method(:before_all) do
                  super()
                  instance_exec(&block)
                end
              end)
              nil
            else
              include Module.new { define_method(:setup) { super(); instance_exec(&block) } }
            end
          end

          # If type is :all, set the after_all hook instead of the after hook.
          def after(type=nil, &block)
            if type == :all
              include(Module.new do
                define_method(:after_all) do
                  instance_exec(&block)
                  super()
                end
              end)
              nil
            else
              include Module.new { define_method(:teardown) { instance_exec(&block); super() } }
            end
          end
        RUBY

        # make hooks work everywhere
        raise unless code.sub!(/ +def self.included\(.*?\n  end\s+/m, "")
      end

      "#{url}\n# BEGIN #{do_not_modify}\n#{code.strip}\n#END #{do_not_modify}"
    end

    File.write(file, parts.reject(&:empty?).join("\n\n"))
  end
end
